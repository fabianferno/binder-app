task("create-account", "Creates a ERC6551 Account")
  .addParam("contract", "The address of the registry contract")
  .addParam("implementation", "The address of the implementation")
  .addParam("tokencontract", "The address of the token contract")
  .addParam("tokenid", "The id of the token")
  .addParam("chainid", "The chain id")
  .setAction(async (taskArgs, hre) => {
    if (network.name === "hardhat") {
      throw Error(
        'This command cannot be used on a local development chain.  Specify a valid network or simulate an Functions request locally with "npx hardhat functions-simulate".'
      )
    }

    const { implementation, tokencontract, tokenid, contract, chainid } = taskArgs
    const zkProof =
      "0x0000000000000000000000000000000000000000000000000000000000000020b14aa2b855beee446a9685f4a38e612e00000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76312e31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010461a417b111783471c8dceec6b5daa151f44e4a9ff916046a724c80e5b7524800000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c013c7026622b32717c6f9f76e332429fde11c71b34635fbbf19ed66074ca0198b0932ed1ce416f0932b81df5f7db06f2dbe0003f932141699298505faf7a103fa00cfed2f84948c42bfd7b20bddbe481486bcf8a5f8595cc842a348ad6ccfe8222aa28babdfed3425312bd33705146b2661202eedd1a5411fb50dbe62a63f2e2c1cdb7ee427090f5a086f36cd73e7466cdb7dec36a1e1d63a570ee78c31d836d504676be82ce685f27aad0456026f7f7a8092068e87af3e8f1f6554084f6c508c0ed2ed8dd6f05012bca38d7c256bc271a3c9b0a2cd219cbad62d89d19cedc7fd2ff708a4de136c95748c2b243219e351af441c7eaa86cd1ede1d24386dd0ab97000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001801b584700a740f9576cc7e83745895452edc518a9ce60b430e1272fc4eb93b057cf80de4f8dd3e4c56f948f40c28c3acbeca71ef9f825597bf8cc059f1238b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000461a417b111783471c8dceec6b5daa151f44e4a9ff916046a724c80e5b7524801431df73e5f41c250f2b4ccdfcb53f8b6ead6109e7f8d85c6dfa2c1c4ac5aff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000311ece950f9ec55757eb95f3182ae5e2000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c02fb118aa39459bba12bd7176ee9a1de946dd5fdbac2412d7b3cf50b242e031a10e84b6c31acc220e79baf557f0604614d253bfc68b65e9dddccb6fcbe463f59525791231c00e31e21956fc0bea84e7d8e0388a4537ae78a7cdd150324c0e12d4039581201ac33920e44648b08293af10851c65fcf6793afd44e1d28c314ef6a11425e13ecfa2cd92cdbd670c245d07205e606b68bf9885fd4b0c2fda6547066a28e8a33e194401ed6b6912f2cfdb1c1bd3693b68351a4927ad2262fdbaadc0fc1e88ed18d174f1adce1e151c25c8ea676dabe702d9a9162af627179716b141f52fb560d666ce8a1d2fd6fe865c086bda89ab45c9195486d2906ea758ef88ef2c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001801b584700a740f9576cc7e83745895452edc518a9ce60b430e1272fc4eb93b057cf80de4f8dd3e4c56f948f40c28c3acbeca71ef9f825597bf8cc059f1238b1037de674a7fa938b3844f6d5330e29f79f1f789b65229342f90b3cab57de4ff10d2a0ba03f2c683c40e471038f167450a0ef7758268482716af525880a9f80d25eac68ab7637d950c616da7a4d09dacd7e992c0f76eb3c6a1dbdbcba13ea123000000000000000000000000000000000000000000000000000000000000000100ba80222e6d252d9f9b503c96a98d85442d8c1cf9ba8f6ebc1e0a6c0fffffff00000000000000000000000000000000000000000000000000000000000000000461a417b111783471c8dceec6b5daa151f44e4a9ff916046a724c80e5b7524801431df73e5f41c250f2b4ccdfcb53f8b6ead6109e7f8d85c6dfa2c1c4ac5aff000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    const verifiedGroupId = "0x311ece950f9ec55757eb95f3182ae5e2"

    const preferenceGroupIds = ["0x8b64c959a715c6b10aa8372100071ca7", "0x6458d3872ba7b3daf9ec5adbb694d393"]

    const accountRegistry = await ethers.getContractFactory("BinderERC6551Registry")
    const accountRegistryContract = await accountRegistry.attach(contract)

    const executeFunctionSelector = ethers.utils.id("initialize(bytes,bytes16,bytes16[])").slice(0, 10)

    // Encode the parameters
    const encodedParams = ethers.utils.defaultAbiCoder.encode(
      ["bytes", "bytes16", "bytes16[]"],
      [zkProof, verifiedGroupId, preferenceGroupIds]
    )
    const initData = executeFunctionSelector + encodedParams.slice(2)
    console.log(initData)
    // const createAccountTx = await accountRegistryContract.createAccount(
    //   implementation,
    //   chainid,
    //   tokencontract,
    //   tokenid,
    //   34143,
    //   initData
    // )

    // await createAccountTx.wait(3)
    // console.log(createAccountTx)
    // console.log("Account created!")
  })
